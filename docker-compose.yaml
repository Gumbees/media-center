# This is the base configuration file that creates local volumes for all containers.
# Environment variables are loaded from .env file by default
# See DEVELOPMENT.md for detailed documentation
#
# ARM64 COMPATIBILITY NOTES:
# - jellyseerr and jellystat are disabled due to lack of ARM64 support
# - overseerr is provided as an ARM64-compatible alternative to jellyseerr
# - lidarr uses blampe/lidarr image as workaround for MusicBrainz outage
# - All other services support ARM64 architecture

version: "3.8"

services:
  bazarr:
    image: "lscr.io/linuxserver/bazarr:latest"
    entrypoint: ["/init"]
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
    volumes:
      - "bazarr_config_volume:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}"
    networks:
      - traefik_public
      - media_center_apps
    deploy:
      restart_policy:
        condition: any
      placement: {}
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik_public"
        # Public domain router
        - "traefik.http.routers.bazarr-public.rule=Host(`${BAZARR_PUBLIC_DOMAIN}`)"
        - "traefik.http.routers.bazarr-public.entrypoints=web,websecure"
        - "traefik.http.routers.bazarr-public.tls=true"
        - "traefik.http.routers.bazarr-public.tls.certresolver=letsencrypt"
        - "traefik.http.routers.bazarr-public.service=bazarr"
        # Private domain router
        - "traefik.http.routers.bazarr-private.rule=Host(`${BAZARR_PRIVATE_DOMAIN}`)"
        - "traefik.http.routers.bazarr-private.entrypoints=web,websecure"
        - "traefik.http.routers.bazarr-private.tls=true"
        - "traefik.http.routers.bazarr-private.tls.certresolver=letsencrypt"
        - "traefik.http.routers.bazarr-private.service=bazarr"
        # Service definition
        - "traefik.http.services.bazarr.loadbalancer.server.port=6767"



  whisper:
    image: "onerahmet/openai-whisper-asr-webservice:latest"
    healthcheck:
      disable: true
    environment:
      - ASR_MODEL=${WHISPER_MODEL:-medium}
      - ASR_ENGINE=${WHISPER_ENGINE:-openai_whisper}
      - ASR_VAD=${WHISPER_VAD:-true}
      - ASR_THREADS=${WHISPER_THREADS:-4}
      - ASR_BEAM_SIZE=${WHISPER_BEAM_SIZE:-5}
      - ASR_COMPUTE_TYPE=${WHISPER_COMPUTE_TYPE:-auto}
    volumes:
      - "whisper_models_volume:/root/.cache/whisper"
    networks:
      - media_center_apps
    deploy:
      restart_policy:
        condition: any
      placement:
        preferences:
          - spread: node.labels.amd_gpu==true

  jellyfin:
    image: "jellyfin/jellyfin:latest"
    healthcheck:
      disable: true
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - JELLYFIN_PublishedServerUrl=${JELLYFIN_SERVER_URL}
      - LIBVA_DRIVER_NAME=radeonsi
    volumes:
      - "jellyfin_config_volume:/config"
      - "temp_volume:/cache/jellyfin"
      - "media_volume:${CONTAINER_MEDIA_PATH}"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}"
    networks:
      - traefik_public
      - media_center_apps
    runtime: amd
    deploy:
      resources:
        reservations:
          devices:
            - driver: amd
              count: all
              capabilities: [gpu]
      restart_policy:
        condition: any
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik_public"
        # Public domain router
        - "traefik.http.routers.jellyfin-public.rule=Host(`${JELLYFIN_PUBLIC_DOMAIN}`)"
        - "traefik.http.routers.jellyfin-public.entrypoints=web,websecure"
        - "traefik.http.routers.jellyfin-public.tls=true"
        - "traefik.http.routers.jellyfin-public.tls.certresolver=letsencrypt"
        - "traefik.http.routers.jellyfin-public.service=jellyfin"
        # Private domain router
        - "traefik.http.routers.jellyfin-private.rule=Host(`${JELLYFIN_PRIVATE_DOMAIN}`)"
        - "traefik.http.routers.jellyfin-private.entrypoints=web,websecure"
        - "traefik.http.routers.jellyfin-private.tls=true"
        - "traefik.http.routers.jellyfin-private.tls.certresolver=letsencrypt"
        - "traefik.http.routers.jellyfin-private.service=jellyfin"
        # Service definition
        - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"
      placement:
        preferences:
          - spread: node.labels.amd_gpu==true



  jellyseerr:
    image: "fallenbagel/jellyseerr:latest"
    entrypoint: ["/sbin/tini", "--"]
    command: ["pnpm", "start"]
    environment:
      - TZ=${TZ}
      - PORT=${JELLYSEERR_PORT:-5055}
      - LOG_LEVEL=${JELLYSEERR_LOG_LEVEL:-info}
    volumes:
      - "jellyseerr_config_volume:/app/config"
    networks:
      - traefik_public
      - media_center_apps
    deploy:
      restart_policy:
        condition: any
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik_public"
        # Public domain router
        - "traefik.http.routers.jellyseerr-public.rule=Host(`${JELLYSEERR_PUBLIC_DOMAIN}`)"
        - "traefik.http.routers.jellyseerr-public.entrypoints=web,websecure"
        - "traefik.http.routers.jellyseerr-public.tls=true"
        - "traefik.http.routers.jellyseerr-public.tls.certresolver=letsencrypt"
        - "traefik.http.routers.jellyseerr-public.service=jellyseerr"
        # Private domain router
        - "traefik.http.routers.jellyseerr-private.rule=Host(`${JELLYSEERR_PRIVATE_DOMAIN}`)"
        - "traefik.http.routers.jellyseerr-private.entrypoints=web,websecure"
        - "traefik.http.routers.jellyseerr-private.tls=true"
        - "traefik.http.routers.jellyseerr-private.tls.certresolver=letsencrypt"
        - "traefik.http.routers.jellyseerr-private.service=jellyseerr"
        # Service definition
        - "traefik.http.services.jellyseerr.loadbalancer.server.port=5055"

  # overseerr:
  #   container_name: "${CONTAINER_NAME_PREFIX}_overseerr"
  #   image: "lscr.io/linuxserver/overseerr:latest"
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #   volumes:
  #     - "overseerr_config_volume:/config"
  #   networks:
  #     - proxy
  #     - media_center_apps
  #     - container_pia_internet
  #   restart: unless-stopped
  #   labels:
  #     - "traefik.enable=true"
  #     # Public domain router
  #     - "traefik.http.routers.overseerr-public.rule=Host(`${OVERSEERR_PUBLIC_DOMAIN}`)"
  #     - "traefik.http.routers.overseerr-public.entrypoints=web,websecure"
  #     - "traefik.http.routers.overseerr-public.tls=true"
  #     - "traefik.http.routers.overseerr-public.tls.certresolver=letsencrypt"
  #     - "traefik.http.routers.overseerr-public.service=overseerr"
  #     # Private domain router
  #     - "traefik.http.routers.overseerr-private.rule=Host(`${OVERSEERR_PRIVATE_DOMAIN}`)"
  #     - "traefik.http.routers.overseerr-private.entrypoints=web,websecure"
  #     - "traefik.http.routers.overseerr-private.tls=true"
  #     - "traefik.http.routers.overseerr-private.tls.certresolver=letsencrypt"
  #     - "traefik.http.routers.overseerr-private.service=overseerr"
  #     # Service definition
  #     - "traefik.http.services.overseerr.loadbalancer.server.port=5055"
  #   # DISABLED: Switched to jellyseerr

  qbittorrent:
    image: "lscr.io/linuxserver/qbittorrent:latest"
    entrypoint: ["/init"]
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - WEBUI_PORT=8080
      - TORRENTING_PORT=6881
      - TZ=${TZ}
    volumes:
      - "qbittorrent_config_volume:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}"
      - "temp_volume:/temp/qbittorrent"
    networks:
      - traefik_public
      - media_center_apps
    deploy:
      restart_policy:
        condition: any
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik_public"
        # Public domain router
        - "traefik.http.routers.qbittorrent-public.rule=Host(`${QBITTORRENT_PUBLIC_DOMAIN}`)"
        - "traefik.http.routers.qbittorrent-public.entrypoints=web,websecure"
        - "traefik.http.routers.qbittorrent-public.tls=true"
        - "traefik.http.routers.qbittorrent-public.tls.certresolver=letsencrypt"
        - "traefik.http.routers.qbittorrent-public.service=qbittorrent"
        # Private domain router
        - "traefik.http.routers.qbittorrent-private.rule=Host(`${QBITTORRENT_PRIVATE_DOMAIN}`)"
        - "traefik.http.routers.qbittorrent-private.entrypoints=web,websecure"
        - "traefik.http.routers.qbittorrent-private.tls=true"
        - "traefik.http.routers.qbittorrent-private.tls.certresolver=letsencrypt"
        - "traefik.http.routers.qbittorrent-private.service=qbittorrent"
        # Service definition
        - "traefik.http.services.qbittorrent.loadbalancer.server.port=8080"

  radarr:
    image: "lscr.io/linuxserver/radarr:develop"
    entrypoint: ["/init"]
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - "radarr_config_volume:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}"
    networks:
      - traefik_public
      - media_center_apps
    deploy:
      restart_policy:
        condition: any
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik_public"
        # Public domain router
        - "traefik.http.routers.radarr-public.rule=Host(`${RADARR_PUBLIC_DOMAIN}`)"
        - "traefik.http.routers.radarr-public.entrypoints=web,websecure"
        - "traefik.http.routers.radarr-public.tls=true"
        - "traefik.http.routers.radarr-public.tls.certresolver=letsencrypt"
        - "traefik.http.routers.radarr-public.service=radarr"
        # Private domain router
        - "traefik.http.routers.radarr-private.rule=Host(`${RADARR_PRIVATE_DOMAIN}`)"
        - "traefik.http.routers.radarr-private.entrypoints=web,websecure"
        - "traefik.http.routers.radarr-private.tls=true"
        - "traefik.http.routers.radarr-private.tls.certresolver=letsencrypt"
        - "traefik.http.routers.radarr-private.service=radarr"
        # Service definition
        - "traefik.http.services.radarr.loadbalancer.server.port=7878"

  sabnzbd:
    image: "lscr.io/linuxserver/sabnzbd:4.3.2"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - "sabnzbd_config_volume:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}"
      - "temp_volume:/temp"
    networks:
      - traefik_public
      - media_center_apps
    deploy:
      restart_policy:
        condition: any
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik_public"
        # Public domain router
        - "traefik.http.routers.sabnzbd-public.rule=Host(`${SABNZBD_PUBLIC_DOMAIN}`)"
        - "traefik.http.routers.sabnzbd-public.entrypoints=web,websecure"
        - "traefik.http.routers.sabnzbd-public.tls=true"
        - "traefik.http.routers.sabnzbd-public.tls.certresolver=letsencrypt"
        - "traefik.http.routers.sabnzbd-public.service=sabnzbd"
        # Private domain router
        - "traefik.http.routers.sabnzbd-private.rule=Host(`${SABNZBD_PRIVATE_DOMAIN}`)"
        - "traefik.http.routers.sabnzbd-private.entrypoints=web,websecure"
        - "traefik.http.routers.sabnzbd-private.tls=true"
        - "traefik.http.routers.sabnzbd-private.tls.certresolver=letsencrypt"
        - "traefik.http.routers.sabnzbd-private.service=sabnzbd"
        # Service definition
        - "traefik.http.services.sabnzbd.loadbalancer.server.port=8080"

  sonarr:
    image: "lscr.io/linuxserver/sonarr:develop"
    entrypoint: ["/init"]
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - "sonarr_config_volume:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}"
    networks:
      - traefik_public
      - media_center_apps
    # run `getent group render` on the host
    deploy:
      restart_policy:
        condition: any
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik_public"
        # Public domain router
        - "traefik.http.routers.sonarr-public.rule=Host(`${SONARR_PUBLIC_DOMAIN}`)"
        - "traefik.http.routers.sonarr-public.entrypoints=web,websecure"
        - "traefik.http.routers.sonarr-public.tls=true"
        - "traefik.http.routers.sonarr-public.tls.certresolver=letsencrypt"
        - "traefik.http.routers.sonarr-public.service=sonarr"
        # Private domain router
        - "traefik.http.routers.sonarr-private.rule=Host(`${SONARR_PRIVATE_DOMAIN}`)"
        - "traefik.http.routers.sonarr-private.entrypoints=web,websecure"
        - "traefik.http.routers.sonarr-private.tls=true"
        - "traefik.http.routers.sonarr-private.tls.certresolver=letsencrypt"
        - "traefik.http.routers.sonarr-private.service=sonarr"
        # Service definition
        - "traefik.http.services.sonarr.loadbalancer.server.port=8989"

  lidarr:
    image: "blampe/lidarr:latest"
    entrypoint: ["/init"]
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - "lidarr_config_volume:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}"
    networks:
      - traefik_public
      - media_center_apps
    deploy:
      restart_policy:
        condition: any
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik_public"
        # Public domain router
        - "traefik.http.routers.lidarr-public.rule=Host(`${LIDARR_PUBLIC_DOMAIN}`)"
        - "traefik.http.routers.lidarr-public.entrypoints=web,websecure"
        - "traefik.http.routers.lidarr-public.tls=true"
        - "traefik.http.routers.lidarr-public.tls.certresolver=letsencrypt"
        - "traefik.http.routers.lidarr-public.service=lidarr"
        # Private domain router
        - "traefik.http.routers.lidarr-private.rule=Host(`${LIDARR_PRIVATE_DOMAIN}`)"
        - "traefik.http.routers.lidarr-private.entrypoints=web,websecure"
        - "traefik.http.routers.lidarr-private.tls=true"
        - "traefik.http.routers.lidarr-private.tls.certresolver=letsencrypt"
        - "traefik.http.routers.lidarr-private.service=lidarr"
        # Service definition
        - "traefik.http.services.lidarr.loadbalancer.server.port=8686"

  cloudflared:
    image: "cloudflare/cloudflared:latest"
    entrypoint: ["cloudflared", "--no-autoupdate"]
    command: ["tunnel", "run"]
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARED_TOKEN}
    networks:
      - media_center_apps  # Access to app services and internet for tunnel
      # NOTE: Cloudflared does NOT connect to database networks for security
    deploy:
      restart_policy:
        condition: any
      replicas: ${ENABLE_CLOUDFLARED:-0}



  # jellystat:
  #   container_name: "${CONTAINER_NAME_PREFIX}_jellystat"
  #   image: "cyfershepard/jellystat:latest"
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #     - JELLYSTAT_JELLYFIN_URL=${JELLYFIN_SERVER_URL}
  #     - POSTGRES_USER=${JELLYSTAT_DB_USER}
  #     - POSTGRES_PASSWORD=${JELLYSTAT_DB_PASSWORD}
  #     - POSTGRES_IP=${CONTAINER_NAME_PREFIX}_jellystat_db
  #     - POSTGRES_PORT=5432
  #     - JWT_SECRET=${JELLYSTAT_JWT_SECRET}
  #   volumes:
  #     - "jellystat_config_volume:/app/data"
  #     - "jellystat_backup:/app/backend/backup-data"
  #   networks:
  #     - media_center_apps              # Access to other app services
  #     - container_pia_internet         # Internet access via VPN
  #     - media_center_jellystat_db_network  # Database access
  #   depends_on:
  #     - jellystat_db
  #   restart: unless-stopped
  #   # DISABLED: This image doesn't have ARM64 support yet

  # jellystat_db:
  #   container_name: "${CONTAINER_NAME_PREFIX}_jellystat_db"
  #   image: "postgres:15.2"
  #   shm_size: 1gb
  #   environment:
  #     - POSTGRES_USER=${JELLYSTAT_DB_USER}
  #     - POSTGRES_PASSWORD=${JELLYSTAT_DB_PASSWORD}
  #   volumes:
  #     - "jellystat_db:/var/lib/postgresql/data"
  #   networks:
  #     - media_center_jellystat_db_network  # ONLY database network (no internet/app access)
  #   restart: unless-stopped
  #   logging:
  #     driver: json-file
  #     options:
  #       max-file: '5'
  #       max-size: 10m
  #   # DISABLED: Related to jellystat service

  

networks:
  # External Traefik ingress network (shared across stacks)
  traefik_public:
    external: true
    name: "traefik_public"

  # Stack network with internet access (routing handled by host)
  media_center_apps:
    name: "${CONTAINER_NAME_PREFIX}_network"
    driver: overlay
    attachable: true


  # # Isolated database network for jellystat database communication
  # # Apps connect to both media_center_apps AND this network to access database
  # # Database only connects to this network (no internet access)
  # media_center_jellystat_db_network:
  #   name: "${CONTAINER_NAME_PREFIX}_jellystat_db_network"
  #   internal: true
  #   driver: bridge
  #   # DISABLED: Related to jellystat service

volumes:
  # Media volume - shared across all services
  media_volume:
    name: "${CONTAINER_NAME_PREFIX}_media"
    driver: local
    driver_opts:
      type: ${MEDIA_VOLUME_TYPE:-}
      o: ${MEDIA_VOLUME_OPTIONS:-}
      device: ${MEDIA_BASE:-}
  
  # Temporary volume - shared for downloads and cache
  temp_volume:
    name: "${CONTAINER_NAME_PREFIX}_temp"
    driver: local
    driver_opts:
      type: ${TEMP_VOLUME_TYPE:-}
      o: ${TEMP_VOLUME_OPTIONS:-}
      device: ${TEMP_BASE:-}
  
  # Individual service configuration volumes
  bazarr_config_volume:
    name: "${CONTAINER_NAME_PREFIX}_bazarr_config"
    driver: local
    driver_opts:
      type: ${CONFIG_VOLUME_TYPE:-}
      o: ${CONFIG_VOLUME_OPTIONS:-}
      device: ${CONFIG_BASE}/bazarr
      

      
  jellyfin_config_volume:
    name: "${CONTAINER_NAME_PREFIX}_jellyfin_config"
    driver: local
    driver_opts:
      type: ${CONFIG_VOLUME_TYPE:-}
      o: ${CONFIG_VOLUME_OPTIONS:-}
      device: ${CONFIG_BASE}/jellyfin-data
      

      
  jellyseerr_config_volume:
    name: "${CONTAINER_NAME_PREFIX}_jellyseerr_config"
    driver: local
    driver_opts:
      type: ${CONFIG_VOLUME_TYPE:-}
      o: ${CONFIG_VOLUME_OPTIONS:-}
      device: ${CONFIG_BASE}/jellyseerr

  # overseerr_config_volume:
  #   name: "${CONTAINER_NAME_PREFIX}_overseerr_config"
  #   driver: local
  #   driver_opts:
  #     type: ${CONFIG_VOLUME_TYPE:-}
  #     o: ${CONFIG_VOLUME_OPTIONS:-}
  #     device: ${CONFIG_BASE}/overseerr
  #   # DISABLED: Switched to jellyseerr
      
  qbittorrent_config_volume:
    name: "${CONTAINER_NAME_PREFIX}_qbittorrent_config"
    driver: local
    driver_opts:
      type: ${CONFIG_VOLUME_TYPE:-}
      o: ${CONFIG_VOLUME_OPTIONS:-}
      device: ${CONFIG_BASE}/qbittorrent
      
  radarr_config_volume:
    name: "${CONTAINER_NAME_PREFIX}_radarr_config"
    driver: local
    driver_opts:
      type: ${CONFIG_VOLUME_TYPE:-}
      o: ${CONFIG_VOLUME_OPTIONS:-}
      device: ${CONFIG_BASE}/radarr
      
  sabnzbd_config_volume:
    name: "${CONTAINER_NAME_PREFIX}_sabnzbd_config"
    driver: local
    driver_opts:
      type: ${CONFIG_VOLUME_TYPE:-}
      o: ${CONFIG_VOLUME_OPTIONS:-}
      device: ${CONFIG_BASE}/sabnzbd
      
  sonarr_config_volume:
    name: "${CONTAINER_NAME_PREFIX}_sonarr_config"
    driver: local
    driver_opts:
      type: ${CONFIG_VOLUME_TYPE:-}
      o: ${CONFIG_VOLUME_OPTIONS:-}
      device: ${CONFIG_BASE}/sonarr
      
  lidarr_config_volume:
    name: "${CONTAINER_NAME_PREFIX}_lidarr_config"
    driver: local
    driver_opts:
      type: ${CONFIG_VOLUME_TYPE:-}
      o: ${CONFIG_VOLUME_OPTIONS:-}
      device: ${CONFIG_BASE}/lidarr
      

      
  whisper_models_volume:
    name: "${CONTAINER_NAME_PREFIX}_whisper_models"
    driver: local
    driver_opts:
      type: ${CONFIG_VOLUME_TYPE:-}
      o: ${CONFIG_VOLUME_OPTIONS:-}
      device: ${CONFIG_BASE}/whisper-models

  
