# DEPRECATION NOTICE
# This file defaults to local config and temp storage for backward compatibility.
# This behavior will be removed on January 1, 2026.
# For new deployments, please use the appropriate docker-compose.local-*.yaml files
# for your storage configuration.
#
# Migration Guide:
# - For the current default behavior (local config/temp): use docker-compose.local-config-temp.yaml
# - For all local storage: use docker-compose.local-all.yaml
# - For all external storage: use this file with external volumes
# See DEVELOPMENT.md for detailed documentation

version: "3.8"

x-volume-local: &volume-local
  driver: local
  driver_opts:
    type: none
    o: bind
    device: ${MEDIA_BASE}

x-volume-external: &volume-external
  external: true
  name: ${MEDIA_VOLUME_NAME}

services:
  bazarr:
    container_name: "bazarr"
    image: "lscr.io/linuxserver/bazarr:${ARCH}-latest"
    entrypoint: ["/init"]
    env_file:
      - stack.env
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
    volumes:
      - "${CONFIG_BASE}/bazarr:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}:ro"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}:ro"
    networks:
      - media_center_apps
    restart: unless-stopped

  calibre_web:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre_web
    env_file:
      - stack.env
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    networks:
      - media_center_apps
    volumes:
      - "${CONFIG_BASE}/calibre-web:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}:ro"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}:ro"
    restart: unless-stopped

  calibre:
    image: lscr.io/linuxserver/calibre:latest
    container_name: calibre
    env_file:
      - stack.env
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - "${CONFIG_BASE}/calibre:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}"
    restart: unless-stopped
    networks:
      - media_center_apps
    
  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    env_file:
      - stack.env
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    networks:
      - media_center_apps
    volumes:
      - "${CONFIG_BASE}/readarr:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}:ro"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}:ro"
      - "${TEMP_BASE}/readarr:/downloads"
    restart: unless-stopped

  jellyfin:
    container_name: "jellyfin"
    image: "jellyfin/jellyfin"
    entrypoint: ["/jellyfin/jellyfin"]
    env_file:
      - stack.env
    environment:
      - JELLYFIN_PublishedServerUrl=${JELLYFIN_SERVER_URL}
      - TZ=${TZ}
    devices:
      - ${ROCKCHIP_DEVICE_DRI}
      - ${ROCKCHIP_DEVICE_DMA_HEAP}
      - ${ROCKCHIP_DEVICE_MALI}
      - ${ROCKCHIP_DEVICE_RGA}
      - ${ROCKCHIP_DEVICE_MPP}
    volumes:
      - "${CONFIG_BASE}/jellyfin-data:/config"
      - "${TEMP_BASE}/jellyfin:/cache"
      - "media_volume:${CONTAINER_MEDIA_PATH}:ro"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}:ro"
    networks:
      media_center_apps:
      home_iot:
        ipv4_address: ${JELLYFIN_IP}
    privileged: ${ENABLE_ROCKCHIP_ACCELERATION}
    restart: unless-stopped

  jellyseerr:
    container_name: "jellyseerr"
    image: "fallenbagel/jellyseerr:latest"
    entrypoint: ["/sbin/tini", "--"]
    command: ["pnpm", "start"]
    env_file:
      - stack.env
    environment:
      - TZ=${TZ}
      - PORT=${JELLYFIN_PORT}
      - LOG_LEVEL=${JELLYFIN_LOG_LEVEL}
    volumes:
      - "${CONFIG_BASE}/jellyseerr:/app/config"
    networks:
      - media_center_apps
    restart: unless-stopped

  qbittorrent:
    container_name: "qbittorrent"
    image: "lscr.io/linuxserver/qbittorrent:${ARCH}-latest"
    entrypoint: ["/init"]
    env_file:
      - stack.env
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - WEBUI_PORT=8080
      - TORRENTING_PORT=6881
      - TZ=${TZ}
    volumes:
      - "${CONFIG_BASE}/qbittorrent:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}"
      - "${TEMP_BASE}/qbittorrent:/temp"
    networks:
      - media_center_apps
    restart: unless-stopped

  radarr:
    container_name: "radarr"
    image: "linuxserver/radarr:${ARCH}-develop"
    entrypoint: ["/init"]
    env_file:
      - stack.env
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - "${CONFIG_BASE}/radarr:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}:ro"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}:ro"
    networks:
      - media_center_apps
    restart: unless-stopped

  sabnzbd:
    container_name: "sabnzbd"
    image: "lscr.io/linuxserver/sabnzbd:${ARCH}-latest"
    entrypoint: ["/init"]
    env_file:
      - stack.env
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - "${CONFIG_BASE}/sabnzbd:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}"
      - "${TEMP_BASE}/sabnzbd:/temp"
    networks:
      - media_center_apps
    restart: unless-stopped

  sonarr:
    container_name: "sonarr"
    image: "linuxserver/sonarr:${ARCH}-develop"
    entrypoint: ["/init"]
    env_file:
      - stack.env
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - "${CONFIG_BASE}/sonarr:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}:ro"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}:ro"
    networks:
      - media_center_apps
    restart: unless-stopped

  cloudflared:
    profiles:
      - ${ENABLE_CLOUDFLARED:-disabled}
    container_name: "media_center_cloudflared"
    image: "cloudflare/cloudflared:latest"
    entrypoint: ["cloudflared", "--no-autoupdate"]
    command: ["tunnel", "run"]
    env_file:
      - stack.env
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARED_TOKEN}
    networks:
      - media_center_apps
    restart: always

  jellystat:
    container_name: "jellystat"
    image: "cyfershepard/jellystat:latest"
    env_file:
      - stack.env
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - JELLYSTAT_JELLYFIN_URL=${JELLYFIN_SERVER_URL}
    volumes:
      - "${CONFIG_BASE}/jellystat:/app/data"
    networks:
      - media_center_apps
    restart: unless-stopped

networks:
  media_center_apps:
    name: "${MEDIA_CENTER_NETWORK}"
  home_iot:
    external: ${ENABLE_HOME_IOT_NETWORK:-false}
    name: "${HOME_IOT_NETWORK:-home_iot}"

volumes:
  media_volume:
    external: true
    name: ${MEDIA_VOLUME_NAME}
  config_volume:
    external: true
    name: ${CONFIG_VOLUME_NAME}
  temp_volume:
    external: true
    name: ${TEMP_VOLUME_NAME}