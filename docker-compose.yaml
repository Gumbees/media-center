# This is the base configuration file that creates local volumes for all containers.
# Environment variables are loaded from .env file by default
# See DEVELOPMENT.md for detailed documentation
#
# ARM64 COMPATIBILITY NOTES:
# - jellyseerr, jellystat, and readarr are disabled due to lack of ARM64 support
# - overseerr is provided as an ARM64-compatible alternative to jellyseerr
# - All other services support ARM64 architecture

version: "3.8"

services:
  bazarr:
    container_name: "${CONTAINER_NAME_PREFIX}_bazarr"
    image: "lscr.io/linuxserver/bazarr:latest"
    entrypoint: ["/init"]
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
    volumes:
      - "bazarr_config_volume:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}"
    networks:
      - media_center_apps
      - container_pia_internet
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bazarr.rule=Host(`bazarr.media.bierlysmith.com`)"
      - "traefik.http.routers.bazarr.entrypoints=web"
      - "traefik.http.services.bazarr.loadbalancer.server.port=6767"

  calibre_web:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: "${CONTAINER_NAME_PREFIX}_calibre_web"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    networks:
      - media_center_apps
    volumes:
      - "calibre_web_config_volume:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.calibre-web.rule=Host(`calibre-web.media.bierlysmith.com`)"
      - "traefik.http.routers.calibre-web.entrypoints=web"
      - "traefik.http.services.calibre-web.loadbalancer.server.port=8083"

  calibre:
    image: lscr.io/linuxserver/calibre:latest
    container_name: "${CONTAINER_NAME_PREFIX}_calibre"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - "calibre_config_volume:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}"
    restart: unless-stopped
    networks:
      - media_center_apps
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.calibre.rule=Host(`calibre.media.bierlysmith.com`)"
      - "traefik.http.routers.calibre.entrypoints=web"
      - "traefik.http.services.calibre.loadbalancer.server.port=8080"
    
  # readarr:
  #   image: lscr.io/linuxserver/readarr:latest
  #   container_name: "${CONTAINER_NAME_PREFIX}_readarr"
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #   networks:
  #     - media_center_apps
  #     - container_pia_internet
  #   volumes:
  #     - "readarr_config_volume:/config"
  #     - "media_volume:${CONTAINER_MEDIA_PATH}"
  #     - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}"
  #     - "temp_volume:/downloads/readarr"
  #   restart: unless-stopped
  #   # DISABLED: No ARM64 support available

  jellyfin:
    container_name: "${CONTAINER_NAME_PREFIX}_jellyfin"
    image: jellyfin/jellyfin:latest"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - JELLYFIN_PublishedServerUrl=${JELLYFIN_SERVER_URL}
    group_add:
      - "44"  # host “video” group id – lets Jellyfin open the devices
      - "105"  # host “render” group id – lets Jellyfin open the devices
    privileged: true
    devices:
      - '/dev/dri:/dev/dri'
      - '/dev/dma_heap:/dev/dma_heap'
      - '/dev/mali0:/dev/mali0'
      - '/dev/rga:/dev/rga'
      - '/dev/mpp_service:/dev/mpp_service'
    volumes:
      - "jellyfin_config_volume:/config"
      - "temp_volume:/cache/jellyfin"
      - "media_volume:${CONTAINER_MEDIA_PATH}"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}"
      - /lib/firmware:/lib/firmware:ro
    networks:
      media_center_apps:
      container_internet:
    security_opt: # enables full access to /sys and /proc, still far better than privileged: true
      - systempaths=unconfined
      - apparmor=unconfined
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.rule=Host(`media.bierlysmith.com`)"
      - "traefik.http.routers.jellyfin.entrypoints=web"
      - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"

  # jellyseerr:
  #   container_name: "${CONTAINER_NAME_PREFIX}_jellyseerr"
  #   image: "fallenbagel/jellyseerr:latest"
  #   entrypoint: ["/sbin/tini", "--"]
  #   command: ["pnpm", "start"]
  #   environment:
  #     - TZ=${TZ}
  #     - PORT=${JELLYFIN_PORT}
  #     - LOG_LEVEL=${JELLYFIN_LOG_LEVEL}
  #   volumes:
  #     - "jellyseerr_config_volume:/app/config"
  #   networks:
  #     - media_center_apps
  #     - container_pia_internet
  #   restart: unless-stopped
  #   # DISABLED: This image may not have ARM64 support
  #   # You can try uncommenting and testing, or use overseerr as an alternative

  # ARM64-compatible alternative to jellyseerr:
  overseerr:
    container_name: "${CONTAINER_NAME_PREFIX}_overseerr"
    image: "lscr.io/linuxserver/overseerr:latest"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - "overseerr_config_volume:/config"
    networks:
      - media_center_apps
      - container_pia_internet
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.overseerr.rule=Host(`overseerr.media.bierlysmith.com`)"
      - "traefik.http.routers.overseerr.entrypoints=web"
      - "traefik.http.services.overseerr.loadbalancer.server.port=5055"

  qbittorrent:
    container_name: "${CONTAINER_NAME_PREFIX}_qbittorrent"
    image: "lscr.io/linuxserver/qbittorrent:latest"
    entrypoint: ["/init"]
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - WEBUI_PORT=8080
      - TORRENTING_PORT=6881
      - TZ=${TZ}
    volumes:
      - "qbittorrent_config_volume:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}"
      - "temp_volume:/temp/qbittorrent"
    networks:
      - media_center_apps
      - container_pia_internet
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.media.bierlysmith.com`)"
      - "traefik.http.routers.qbittorrent.entrypoints=web"
      - "traefik.http.services.qbittorrent.loadbalancer.server.port=8080"

  radarr:
    container_name: "${CONTAINER_NAME_PREFIX}_radarr"
    image: "lscr.io/linuxserver/radarr:develop"
    entrypoint: ["/init"]
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - "radarr_config_volume:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}"
    networks:
      - media_center_apps
      - container_pia_internet
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`radarr.media.bierlysmith.com`)"
      - "traefik.http.routers.radarr.entrypoints=web"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"

  sabnzbd:
    container_name: "${CONTAINER_NAME_PREFIX}_sabnzbd"
    image: "lscr.io/linuxserver/sabnzbd:latest"
    entrypoint: ["/init"]
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - "sabnzbd_config_volume:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}"
      - "temp_volume:/temp/sabnzbd"
    networks:
      - media_center_apps
      - container_pia_internet
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sabnzbd.rule=Host(`sabnzbd.media.bierlysmith.com`)"
      - "traefik.http.routers.sabnzbd.entrypoints=web"
      - "traefik.http.services.sabnzbd.loadbalancer.server.port=8080"

  sonarr:
    container_name: "${CONTAINER_NAME_PREFIX}_sonarr"
    image: "lscr.io/linuxserver/sonarr:develop"
    entrypoint: ["/init"]
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - "sonarr_config_volume:/config"
      - "media_volume:${CONTAINER_MEDIA_PATH}"
      - "media_volume:${CONTAINER_MEDIA_PATH_LEGACY}"
    networks:
      - media_center_apps
      - container_pia_internet
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.media.bierlysmith.com`)"
      - "traefik.http.routers.sonarr.entrypoints=web"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"

  cloudflared:
    container_name: "${CONTAINER_NAME_PREFIX}_cloudflared"
    image: "cloudflare/cloudflared:latest"
    entrypoint: ["cloudflared", "--no-autoupdate"]
    command: ["tunnel", "run"]
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARED_TOKEN}
    networks:
      - media_center_apps  # Access to app services
      - container_internet # Internet access for tunnel
      # NOTE: Cloudflared does NOT connect to database networks for security
    restart: always
    deploy:
      replicas: ${ENABLE_CLOUDFLARED:-0}
    healthcheck:
      test: ["CMD", "cloudflared", "tunnel", "status"]
      interval: 120s
      timeout: 30s
      retries: 5
      start_period: 60s

  # jellystat:
  #   container_name: "${CONTAINER_NAME_PREFIX}_jellystat"
  #   image: "cyfershepard/jellystat:latest"
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #     - JELLYSTAT_JELLYFIN_URL=${JELLYFIN_SERVER_URL}
  #     - POSTGRES_USER=${JELLYSTAT_DB_USER}
  #     - POSTGRES_PASSWORD=${JELLYSTAT_DB_PASSWORD}
  #     - POSTGRES_IP=${CONTAINER_NAME_PREFIX}_jellystat_db
  #     - POSTGRES_PORT=5432
  #     - JWT_SECRET=${JELLYSTAT_JWT_SECRET}
  #   volumes:
  #     - "jellystat_config_volume:/app/data"
  #     - "jellystat_backup:/app/backend/backup-data"
  #   networks:
  #     - media_center_apps              # Access to other app services
  #     - container_pia_internet         # Internet access via VPN
  #     - media_center_jellystat_db_network  # Database access
  #   depends_on:
  #     - jellystat_db
  #   restart: unless-stopped
  #   # DISABLED: This image doesn't have ARM64 support yet

  # jellystat_db:
  #   container_name: "${CONTAINER_NAME_PREFIX}_jellystat_db"
  #   image: "postgres:15.2"
  #   shm_size: 1gb
  #   environment:
  #     - POSTGRES_USER=${JELLYSTAT_DB_USER}
  #     - POSTGRES_PASSWORD=${JELLYSTAT_DB_PASSWORD}
  #   volumes:
  #     - "jellystat_db:/var/lib/postgresql/data"
  #   networks:
  #     - media_center_jellystat_db_network  # ONLY database network (no internet/app access)
  #   restart: unless-stopped
  #   logging:
  #     driver: json-file
  #     options:
  #       max-file: '5'
  #       max-size: 10m
  #   # DISABLED: Related to jellystat service

networks:
  # Internal isolated network for inter-service communication (no internet access)
  media_center_apps:
    name: "${MEDIA_CENTER_NETWORK}"
    internal: true
    driver: bridge

  # External network for normal internet access (cloudflared only)
  container_internet:
    external: true
    name: "containers_internet"

  # External network for VPN internet access (media services)
  container_pia_internet:
    external: true
    name: "containers_pia_internet"

  # Home IoT network (optional)
  home_iot:
    external: ${ENABLE_HOME_IOT_NETWORK:-false}
    name: "${HOME_IOT_NETWORK:-home_iot}"

  # # Isolated database network for jellystat database communication
  # # Apps connect to both media_center_apps AND this network to access database
  # # Database only connects to this network (no internet access)
  # media_center_jellystat_db_network:
  #   name: "${CONTAINER_NAME_PREFIX}_jellystat_db_network"
  #   internal: true
  #   driver: bridge
  #   # DISABLED: Related to jellystat service

volumes:
  # Media volume - shared across all services
  media_volume:
    name: "${CONTAINER_NAME_PREFIX}_media"
    driver: local
    driver_opts:
      type: ${MEDIA_VOLUME_TYPE:-}
      o: ${MEDIA_VOLUME_OPTIONS:-}
      device: ${MEDIA_BASE:-}
  
  # Temporary volume - shared for downloads and cache
  temp_volume:
    name: "${CONTAINER_NAME_PREFIX}_temp"
    driver: local
    driver_opts:
      type: ${TEMP_VOLUME_TYPE:-}
      o: ${TEMP_VOLUME_OPTIONS:-}
      device: ${TEMP_BASE:-}
  
  # Individual service configuration volumes
  bazarr_config_volume:
    name: "${CONTAINER_NAME_PREFIX}_bazarr_config"
    driver: local
    driver_opts:
      type: ${CONFIG_VOLUME_TYPE:-}
      o: ${CONFIG_VOLUME_OPTIONS:-}
      device: ${CONFIG_BASE}/bazarr
      
  calibre_web_config_volume:
    name: "${CONTAINER_NAME_PREFIX}_calibre_web_config"
    driver: local
    driver_opts:
      type: ${CONFIG_VOLUME_TYPE:-}
      o: ${CONFIG_VOLUME_OPTIONS:-}
      device: ${CONFIG_BASE}/calibre-web
      
  calibre_config_volume:
    name: "${CONTAINER_NAME_PREFIX}_calibre_config"
    driver: local
    driver_opts:
      type: ${CONFIG_VOLUME_TYPE:-}
      o: ${CONFIG_VOLUME_OPTIONS:-}
      device: ${CONFIG_BASE}/calibre
      
  # readarr_config_volume:
  #   name: "${CONTAINER_NAME_PREFIX}_readarr_config"
  #   driver: local
  #   driver_opts:
  #     type: ${CONFIG_VOLUME_TYPE:-}
  #     o: ${CONFIG_VOLUME_OPTIONS:-}
  #     device: ${CONFIG_BASE}/readarr
  #   # DISABLED: Related to readarr service
      
  jellyfin_config_volume:
    name: "${CONTAINER_NAME_PREFIX}_jellyfin_config"
    driver: local
    driver_opts:
      type: ${CONFIG_VOLUME_TYPE:-}
      o: ${CONFIG_VOLUME_OPTIONS:-}
      device: ${CONFIG_BASE}/jellyfin-data
      
  # jellyseerr_config_volume:
  #   name: "${CONTAINER_NAME_PREFIX}_jellyseerr_config"
  #   driver: local
  #   driver_opts:
  #     type: ${CONFIG_VOLUME_TYPE:-}
  #     o: ${CONFIG_VOLUME_OPTIONS:-}
  #     device: ${CONFIG_BASE}/jellyseerr
  #   # DISABLED: Related to jellyseerr service

  # ARM64-compatible alternative to jellyseerr:
  overseerr_config_volume:
    name: "${CONTAINER_NAME_PREFIX}_overseerr_config"
    driver: local
    driver_opts:
      type: ${CONFIG_VOLUME_TYPE:-}
      o: ${CONFIG_VOLUME_OPTIONS:-}
      device: ${CONFIG_BASE}/overseerr
      
  qbittorrent_config_volume:
    name: "${CONTAINER_NAME_PREFIX}_qbittorrent_config"
    driver: local
    driver_opts:
      type: ${CONFIG_VOLUME_TYPE:-}
      o: ${CONFIG_VOLUME_OPTIONS:-}
      device: ${CONFIG_BASE}/qbittorrent
      
  radarr_config_volume:
    name: "${CONTAINER_NAME_PREFIX}_radarr_config"
    driver: local
    driver_opts:
      type: ${CONFIG_VOLUME_TYPE:-}
      o: ${CONFIG_VOLUME_OPTIONS:-}
      device: ${CONFIG_BASE}/radarr
      
  sabnzbd_config_volume:
    name: "${CONTAINER_NAME_PREFIX}_sabnzbd_config"
    driver: local
    driver_opts:
      type: ${CONFIG_VOLUME_TYPE:-}
      o: ${CONFIG_VOLUME_OPTIONS:-}
      device: ${CONFIG_BASE}/sabnzbd
      
  sonarr_config_volume:
    name: "${CONTAINER_NAME_PREFIX}_sonarr_config"
    driver: local
    driver_opts:
      type: ${CONFIG_VOLUME_TYPE:-}
      o: ${CONFIG_VOLUME_OPTIONS:-}
      device: ${CONFIG_BASE}/sonarr
      
  # jellystat_config_volume:
  #   name: "${CONTAINER_NAME_PREFIX}_jellystat_config"
  #   driver: local
  #   driver_opts:
  #     type: ${CONFIG_VOLUME_TYPE:-}
  #     o: ${CONFIG_VOLUME_OPTIONS:-}
  #     device: ${CONFIG_BASE}/jellystat
  #   # DISABLED: Related to jellystat service
  
  # # Jellystat database volume
  # jellystat_db:
  #   name: "${CONTAINER_NAME_PREFIX}_jellystat_db"
  #   driver: local
  #   driver_opts:
  #     type: ${CONFIG_VOLUME_TYPE:-}
  #     o: ${CONFIG_VOLUME_OPTIONS:-}
  #     device: ${CONFIG_BASE}/jellystat-db
  #   # DISABLED: Related to jellystat service
  
  # # Jellystat backup volume
  # jellystat_backup:
  #   name: "${CONTAINER_NAME_PREFIX}_jellystat_backup"
  #   driver: local
  #   driver_opts:
  #     type: ${CONFIG_VOLUME_TYPE:-}
  #     o: ${CONFIG_VOLUME_OPTIONS:-}
  #     device: ${CONFIG_BASE}/jellystat-backup
  #   # DISABLED: Related to jellystat service
